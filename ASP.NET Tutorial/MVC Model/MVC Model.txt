What is ASP.NET MVC?
- The Model – View – Controller architectural pattern is used to divide the application into three main components: model, view and controller.
- MVC is a software architecture pattern for creating user interfaces on computers
- MVC is divided into three interconnected parts and each component has its own task and is independent of other components.
The components of MVC:
Model:
- Responsible for manipulating the Database
- It contains all functions and methods that directly query data
- The Controller will use those functions and methods to get data and send it to the View
- The model contains all the data-related logic that the user works with, like the schemas and interfaces of a project, the databases, and their fields.
- For example, a customer object will retrieve the customer information from the database, manipulate or update their record in the database, or use it to render data.
View:
- The view contains the UI and the presentation of an application.
- Receive data from Controller
- For example, the customer view will include all the UI components such as text boxes, dropdowns, and other things that the user interacts with.
Controller:
- The controller contains all the business-related logic and handles incoming requests. It is the interface between the Model and the View.
- Take on the role of receiving requests from users, through the Model to get data and then through the View to display it to the user
- For example, the customer controller will handle all the interactions and inputs from the customer view and update the database using the customer model. 
The same controller will be used to view the customer data.
How MVC Architecture works:
- First, the browser sends a request to the Controller. Then, the Controller interacts with the Model to send and receive data.
- The Controller then interacts with the View to render the data. The View is only concerned about how to present the information and not the final presentation. 
It will be a dynamic HTML file that renders data based on what the Controller sends it.
- Finally, the View will send its final presentation to the Controller and the Controller will send that final data to the user output.
- The important thing is that the View and the Model never interact with each other. The only interaction that takes place between them is through the Controller.
